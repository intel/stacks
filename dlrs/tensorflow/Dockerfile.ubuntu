#--------------------------------------------------------------------
# [ARGS] Arguments for FROM statements
#--------------------------------------------------------------------
ARG ubuntu_ver=20.04
#--------------------------------------------------------------------
# [BUILD-COMMON] Common build tools
#--------------------------------------------------------------------
FROM ubuntu:$ubuntu_ver as common_build_tools
ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update \
    && apt-get install -y --no-install-recommends --no-install-suggests \
    python3-pip python3-dev wget git build-essential cmake curl

RUN ln -s /usr/bin/python3.8 /usr/bin/python \
    && ln -s /usr/bin/pip3 /usr/bin/pip

WORKDIR /buildir
COPY scripts/ patches/ .

#--------------------------------------------------------------------
# [TF BUILDER] Builder Stage - Tensorflow on Ubuntu
#--------------------------------------------------------------------
FROM common_build_tools as tf_builder
LABEL maintainer=otc-swstacks@intel.com
ARG tf_ver
ARG platform

# Install SW packages
ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get -y install --no-install-recommends --no-install-suggests \
    bc libjemalloc-dev \
    pkg-config zip zlib1g-dev unzip \
    golang-go

RUN pip install --no-cache-dir enum34

# Install Bazel
RUN go get github.com/bazelbuild/bazelisk \
    && export PATH=$PATH:~/go/bin/ \
    && ln -s ~/go/bin/bazelisk /usr/bin/bazel

RUN ./install_${tf_ver}_ubuntu.sh ${platform}

#--------------------------------------------------------------
# [OPENVINO BUILDER] Builder instance for OpenVINO on Ubuntu
#--------------------------------------------------------------
FROM common_build_tools as openvino_builder_ubuntu
LABEL maintainer=otc-swstacks@intel.com

# Install SW packages
ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get -y install --no-install-recommends --no-install-suggests \
    libtool autoconf libopencv-core-dev autotools-dev automake

#Build OpenVINO
RUN ./get_openvino.sh
RUN ./build_openvino_ubuntu.sh

#--------------------------------------------------------------
# [TF CORE] DLRS Ubuntu TF Core
#--------------------------------------------------------------
FROM ubuntu:$ubuntu_ver as tf_core

RUN apt-get update \
    && apt-get -y install --no-install-recommends --no-install-suggests \
    python3-pip python3 libgoogle-perftools4 libjemalloc2 libjemalloc-dev \
    && ln -s /usr/bin/python3.8 /usr/bin/python \
    && ln -s /usr/bin/pip3 /usr/bin/pip \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoclean -y

COPY --from=tf_builder /tmp/tf/ /tmp/tf/

# install tensorflow
RUN pip --no-cache-dir install /tmp/tf/avx512/tensorflow*.whl \
    && rm -rf /tmp/tf

WORKDIR /workspace
COPY ./licenses/ /workspace/licenses
SHELL ["/bin/bash",  "-c"]

#--------------------------------------------------------------
# [FULL] DLRS Ubuntu TF
#--------------------------------------------------------------
FROM tf_core as tf_full
LABEL maintainer=otc-swstacks@intel.com
ARG tf_ver

# Install SW packages
ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update \
    && apt-get -y install --no-install-recommends --no-install-suggests \
    libomp5 openmpi-bin libopenmpi-dev openssh-server \
    numactl zlib1g-dev libjpeg-dev && rm -rf /var/lib/apt/lists/*

# Create missing links
RUN ln -s /usr/lib/llvm-10/lib/libomp.so.5 /usr/lib/libiomp5.so

COPY common/ scripts/ .

# Install Openvino Inference Engine
COPY --from=openvino_builder_ubuntu /dldt/bin/intel64/Release/lib/ /usr/local/lib/inference-engine/
COPY --from=openvino_builder_ubuntu /dldt/inference-engine/temp/tbb/lib/ /usr/local/lib/
RUN sed -i '1s;^;export LD_LIBRARY_PATH=/usr/local/lib/inference-engine:/usr/local/lib\n;' /etc/bash.bashrc && \
    sed -i '1s;^;export PYTHONPATH=/usr/local/lib/inference-engine/python_api/python3.8:/usr/local/lib/inference-engine/python_api/python3.8/openvino/inference_engine/\n;' /etc/bash.bashrc


# Install Openvino Model Server 
# Install runtime deps, python pkgs and addons
WORKDIR /workspace
RUN apt-get update \
    && apt-get -y install --no-install-recommends --no-install-suggests \
    gcc g++ git python3-dev make curl cmake \
    && pip install --no-cache --no-deps -r /workspace/ovms_deps.txt \
    && /workspace/install_ovms.sh \
    && HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_MPI=1 pip install horovod==0.20.0 \
    && ./install_py_packages.sh ${tf_ver} \
    && find /usr/lib/ -follow -type f -name '*.pyc' -delete \
    && find /usr/lib/ -follow -type f -name '*.js.map' -delete \
    && ./cleanup.sh \
    && rm -rf /workspace/*  \
    && rm -rf /var/lib/apt/lists/*

SHELL ["/bin/bash",  "-c"]
